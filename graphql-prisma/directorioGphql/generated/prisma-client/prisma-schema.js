module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategoria {
  count: Int!
}

type AggregateEmpresa {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Categoria {
  _id: ID!
  nombre: String!
  descripcion: String
  tags: [String!]!
}

type CategoriaConnection {
  pageInfo: PageInfo!
  edges: [CategoriaEdge]!
  aggregate: AggregateCategoria!
}

input CategoriaCreateInput {
  _id: ID
  nombre: String!
  descripcion: String
  tags: CategoriaCreatetagsInput
}

input CategoriaCreateOneInput {
  create: CategoriaCreateInput
  connect: CategoriaWhereUniqueInput
}

input CategoriaCreatetagsInput {
  set: [String!]
}

type CategoriaEdge {
  node: Categoria!
  cursor: String!
}

enum CategoriaOrderByInput {
  _id_ASC
  _id_DESC
  nombre_ASC
  nombre_DESC
  descripcion_ASC
  descripcion_DESC
}

type CategoriaPreviousValues {
  _id: ID!
  nombre: String!
  descripcion: String
  tags: [String!]!
}

type CategoriaSubscriptionPayload {
  mutation: MutationType!
  node: Categoria
  updatedFields: [String!]
  previousValues: CategoriaPreviousValues
}

input CategoriaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoriaWhereInput
  AND: [CategoriaSubscriptionWhereInput!]
}

input CategoriaUpdateDataInput {
  nombre: String
  descripcion: String
  tags: CategoriaUpdatetagsInput
}

input CategoriaUpdateInput {
  nombre: String
  descripcion: String
  tags: CategoriaUpdatetagsInput
}

input CategoriaUpdateManyMutationInput {
  nombre: String
  descripcion: String
  tags: CategoriaUpdatetagsInput
}

input CategoriaUpdateOneRequiredInput {
  create: CategoriaCreateInput
  update: CategoriaUpdateDataInput
  upsert: CategoriaUpsertNestedInput
  connect: CategoriaWhereUniqueInput
}

input CategoriaUpdatetagsInput {
  set: [String!]
}

input CategoriaUpsertNestedInput {
  update: CategoriaUpdateDataInput!
  create: CategoriaCreateInput!
}

input CategoriaWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  nombre: String
  nombre_not: String
  nombre_in: [String!]
  nombre_not_in: [String!]
  nombre_lt: String
  nombre_lte: String
  nombre_gt: String
  nombre_gte: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  descripcion: String
  descripcion_not: String
  descripcion_in: [String!]
  descripcion_not_in: [String!]
  descripcion_lt: String
  descripcion_lte: String
  descripcion_gt: String
  descripcion_gte: String
  descripcion_contains: String
  descripcion_not_contains: String
  descripcion_starts_with: String
  descripcion_not_starts_with: String
  descripcion_ends_with: String
  descripcion_not_ends_with: String
  AND: [CategoriaWhereInput!]
}

input CategoriaWhereUniqueInput {
  _id: ID
}

type Direccion {
  calle: String!
  numero: Int!
  colonia: String!
  ciudad: String!
  cp: String!
  estado: String!
}

input DireccionCreateInput {
  calle: String!
  numero: Int!
  colonia: String!
  ciudad: String!
  cp: String!
  estado: String!
}

input DireccionCreateOneInput {
  create: DireccionCreateInput
}

input DireccionUpdateDataInput {
  calle: String
  numero: Int
  colonia: String
  ciudad: String
  cp: String
  estado: String
}

input DireccionUpdateOneInput {
  create: DireccionCreateInput
  update: DireccionUpdateDataInput
  upsert: DireccionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input DireccionUpsertNestedInput {
  update: DireccionUpdateDataInput!
  create: DireccionCreateInput!
}

input DireccionWhereInput {
  calle: String
  calle_not: String
  calle_in: [String!]
  calle_not_in: [String!]
  calle_lt: String
  calle_lte: String
  calle_gt: String
  calle_gte: String
  calle_contains: String
  calle_not_contains: String
  calle_starts_with: String
  calle_not_starts_with: String
  calle_ends_with: String
  calle_not_ends_with: String
  numero: Int
  numero_not: Int
  numero_in: [Int!]
  numero_not_in: [Int!]
  numero_lt: Int
  numero_lte: Int
  numero_gt: Int
  numero_gte: Int
  colonia: String
  colonia_not: String
  colonia_in: [String!]
  colonia_not_in: [String!]
  colonia_lt: String
  colonia_lte: String
  colonia_gt: String
  colonia_gte: String
  colonia_contains: String
  colonia_not_contains: String
  colonia_starts_with: String
  colonia_not_starts_with: String
  colonia_ends_with: String
  colonia_not_ends_with: String
  ciudad: String
  ciudad_not: String
  ciudad_in: [String!]
  ciudad_not_in: [String!]
  ciudad_lt: String
  ciudad_lte: String
  ciudad_gt: String
  ciudad_gte: String
  ciudad_contains: String
  ciudad_not_contains: String
  ciudad_starts_with: String
  ciudad_not_starts_with: String
  ciudad_ends_with: String
  ciudad_not_ends_with: String
  cp: String
  cp_not: String
  cp_in: [String!]
  cp_not_in: [String!]
  cp_lt: String
  cp_lte: String
  cp_gt: String
  cp_gte: String
  cp_contains: String
  cp_not_contains: String
  cp_starts_with: String
  cp_not_starts_with: String
  cp_ends_with: String
  cp_not_ends_with: String
  estado: String
  estado_not: String
  estado_in: [String!]
  estado_not_in: [String!]
  estado_lt: String
  estado_lte: String
  estado_gt: String
  estado_gte: String
  estado_contains: String
  estado_not_contains: String
  estado_starts_with: String
  estado_not_starts_with: String
  estado_ends_with: String
  estado_not_ends_with: String
  AND: [DireccionWhereInput!]
}

type Empresa {
  id: ID!
  nombre: String!
  descripcion: String
  direccion: Direccion
  horarios: String!
  categoria: Categoria!
  tel: String!
  imagen: String
  rangoDePrecios: String
  ranking: Int
}

type EmpresaConnection {
  pageInfo: PageInfo!
  edges: [EmpresaEdge]!
  aggregate: AggregateEmpresa!
}

input EmpresaCreateInput {
  id: ID
  nombre: String!
  descripcion: String
  direccion: DireccionCreateOneInput
  horarios: String!
  categoria: CategoriaCreateOneInput!
  tel: String!
  imagen: String
  rangoDePrecios: String
  ranking: Int
}

type EmpresaEdge {
  node: Empresa!
  cursor: String!
}

enum EmpresaOrderByInput {
  id_ASC
  id_DESC
  nombre_ASC
  nombre_DESC
  descripcion_ASC
  descripcion_DESC
  horarios_ASC
  horarios_DESC
  tel_ASC
  tel_DESC
  imagen_ASC
  imagen_DESC
  rangoDePrecios_ASC
  rangoDePrecios_DESC
  ranking_ASC
  ranking_DESC
}

type EmpresaPreviousValues {
  id: ID!
  nombre: String!
  descripcion: String
  horarios: String!
  tel: String!
  imagen: String
  rangoDePrecios: String
  ranking: Int
}

type EmpresaSubscriptionPayload {
  mutation: MutationType!
  node: Empresa
  updatedFields: [String!]
  previousValues: EmpresaPreviousValues
}

input EmpresaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmpresaWhereInput
  AND: [EmpresaSubscriptionWhereInput!]
}

input EmpresaUpdateInput {
  nombre: String
  descripcion: String
  direccion: DireccionUpdateOneInput
  horarios: String
  categoria: CategoriaUpdateOneRequiredInput
  tel: String
  imagen: String
  rangoDePrecios: String
  ranking: Int
}

input EmpresaUpdateManyMutationInput {
  nombre: String
  descripcion: String
  horarios: String
  tel: String
  imagen: String
  rangoDePrecios: String
  ranking: Int
}

input EmpresaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nombre: String
  nombre_not: String
  nombre_in: [String!]
  nombre_not_in: [String!]
  nombre_lt: String
  nombre_lte: String
  nombre_gt: String
  nombre_gte: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  descripcion: String
  descripcion_not: String
  descripcion_in: [String!]
  descripcion_not_in: [String!]
  descripcion_lt: String
  descripcion_lte: String
  descripcion_gt: String
  descripcion_gte: String
  descripcion_contains: String
  descripcion_not_contains: String
  descripcion_starts_with: String
  descripcion_not_starts_with: String
  descripcion_ends_with: String
  descripcion_not_ends_with: String
  direccion: DireccionWhereInput
  horarios: String
  horarios_not: String
  horarios_in: [String!]
  horarios_not_in: [String!]
  horarios_lt: String
  horarios_lte: String
  horarios_gt: String
  horarios_gte: String
  horarios_contains: String
  horarios_not_contains: String
  horarios_starts_with: String
  horarios_not_starts_with: String
  horarios_ends_with: String
  horarios_not_ends_with: String
  categoria: CategoriaWhereInput
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  imagen: String
  imagen_not: String
  imagen_in: [String!]
  imagen_not_in: [String!]
  imagen_lt: String
  imagen_lte: String
  imagen_gt: String
  imagen_gte: String
  imagen_contains: String
  imagen_not_contains: String
  imagen_starts_with: String
  imagen_not_starts_with: String
  imagen_ends_with: String
  imagen_not_ends_with: String
  rangoDePrecios: String
  rangoDePrecios_not: String
  rangoDePrecios_in: [String!]
  rangoDePrecios_not_in: [String!]
  rangoDePrecios_lt: String
  rangoDePrecios_lte: String
  rangoDePrecios_gt: String
  rangoDePrecios_gte: String
  rangoDePrecios_contains: String
  rangoDePrecios_not_contains: String
  rangoDePrecios_starts_with: String
  rangoDePrecios_not_starts_with: String
  rangoDePrecios_ends_with: String
  rangoDePrecios_not_ends_with: String
  ranking: Int
  ranking_not: Int
  ranking_in: [Int!]
  ranking_not_in: [Int!]
  ranking_lt: Int
  ranking_lte: Int
  ranking_gt: Int
  ranking_gte: Int
  AND: [EmpresaWhereInput!]
}

input EmpresaWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategoria(data: CategoriaCreateInput!): Categoria!
  updateCategoria(data: CategoriaUpdateInput!, where: CategoriaWhereUniqueInput!): Categoria
  updateManyCategorias(data: CategoriaUpdateManyMutationInput!, where: CategoriaWhereInput): BatchPayload!
  upsertCategoria(where: CategoriaWhereUniqueInput!, create: CategoriaCreateInput!, update: CategoriaUpdateInput!): Categoria!
  deleteCategoria(where: CategoriaWhereUniqueInput!): Categoria
  deleteManyCategorias(where: CategoriaWhereInput): BatchPayload!
  createEmpresa(data: EmpresaCreateInput!): Empresa!
  updateEmpresa(data: EmpresaUpdateInput!, where: EmpresaWhereUniqueInput!): Empresa
  updateManyEmpresas(data: EmpresaUpdateManyMutationInput!, where: EmpresaWhereInput): BatchPayload!
  upsertEmpresa(where: EmpresaWhereUniqueInput!, create: EmpresaCreateInput!, update: EmpresaUpdateInput!): Empresa!
  deleteEmpresa(where: EmpresaWhereUniqueInput!): Empresa
  deleteManyEmpresas(where: EmpresaWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  categoria(where: CategoriaWhereUniqueInput!): Categoria
  categorias(where: CategoriaWhereInput, orderBy: CategoriaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Categoria]!
  categoriasConnection(where: CategoriaWhereInput, orderBy: CategoriaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoriaConnection!
  empresa(where: EmpresaWhereUniqueInput!): Empresa
  empresas(where: EmpresaWhereInput, orderBy: EmpresaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Empresa]!
  empresasConnection(where: EmpresaWhereInput, orderBy: EmpresaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmpresaConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  categoria(where: CategoriaSubscriptionWhereInput): CategoriaSubscriptionPayload
  empresa(where: EmpresaSubscriptionWhereInput): EmpresaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    